{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/services/api';\nimport { jwtDecode } from 'jwt-decode';\nimport AppointmentForm from '@/components/AppointmentForm.vue';\nexport default {\n  components: {\n    AppointmentForm\n  },\n  data() {\n    return {\n      appointments: [],\n      userRole: null // Variável para guardar o cargo do usuário\n    };\n  },\n  created() {\n    this.fetchAppointments();\n  },\n  methods: {\n    doLogout() {\n      localStorage.removeItem('authToken');\n      this.$router.push('/login');\n    },\n    async fetchAppointments() {\n      try {\n        const response = await api.get('/appointments');\n        this.appointments = response.data;\n\n        // --- LÓGICA CORRIGIDA PARA DEFINIR O CARGO (ROLE) ---\n        if (this.appointments.length > 0) {\n          // A gente checa se o backend mandou a informação completa do paciente no primeiro agendamento.\n          // Apenas secretários recebem essa informação completa (com o nome).\n          if (this.appointments[0].pacienteId && this.appointments[0].pacienteId.nome) {\n            this.userRole = 'secretario';\n          } else {\n            this.userRole = 'paciente';\n          }\n        }\n        // --- FIM DA CORREÇÃO ---\n      } catch (error) {\n        alert('Sua sessão expirou. Por favor, faça o login novamente.');\n        this.doLogout();\n      }\n    },\n    async deleteAppointment(id) {\n      if (confirm('Tem certeza que deseja excluir este agendamento?')) {\n        try {\n          await api.delete(`/appointments/${id}`);\n          alert('Agendamento excluído com sucesso!');\n          this.fetchAppointments(); // Atualiza a lista\n        } catch (error) {\n          alert('Erro ao excluir: ' + error.response.data.error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","jwtDecode","AppointmentForm","components","data","appointments","userRole","created","fetchAppointments","methods","doLogout","localStorage","removeItem","$router","push","response","get","length","pacienteId","nome","error","alert","deleteAppointment","id","confirm","delete"],"sources":["C:\\Users\\rafae\\OneDrive\\Desktop\\clinica-inteligente\\frontend\\src\\views\\DashboardView.vue"],"sourcesContent":["<script>\r\nimport api from '@/services/api';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport AppointmentForm from '@/components/AppointmentForm.vue';\r\n\r\nexport default {\r\n  components: { AppointmentForm },\r\n  data() {\r\n    return {\r\n      appointments: [],\r\n      userRole: null // Variável para guardar o cargo do usuário\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchAppointments();\r\n  },\r\n  methods: {\r\n    doLogout() {\r\n      localStorage.removeItem('authToken');\r\n      this.$router.push('/login');\r\n    },\r\n    async fetchAppointments() {\r\n      try {\r\n        const response = await api.get('/appointments');\r\n        this.appointments = response.data;\r\n        \r\n        // --- LÓGICA CORRIGIDA PARA DEFINIR O CARGO (ROLE) ---\r\n        if (this.appointments.length > 0) {\r\n            // A gente checa se o backend mandou a informação completa do paciente no primeiro agendamento.\r\n            // Apenas secretários recebem essa informação completa (com o nome).\r\n            if (this.appointments[0].pacienteId && this.appointments[0].pacienteId.nome) {\r\n                this.userRole = 'secretario';\r\n            } else {\r\n                this.userRole = 'paciente';\r\n            }\r\n        }\r\n        // --- FIM DA CORREÇÃO ---\r\n\r\n      } catch (error) {\r\n          alert('Sua sessão expirou. Por favor, faça o login novamente.');\r\n          this.doLogout();\r\n      }\r\n    },\r\n    async deleteAppointment(id) {\r\n      if (confirm('Tem certeza que deseja excluir este agendamento?')) {\r\n        try {\r\n          await api.delete(`/appointments/${id}`);\r\n          alert('Agendamento excluído com sucesso!');\r\n          this.fetchAppointments(); // Atualiza a lista\r\n        } catch (error) {\r\n          alert('Erro ao excluir: ' + error.response.data.error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":";AACA,OAAOA,GAAE,MAAO,gBAAgB;AAChC,SAASC,SAAQ,QAAS,YAAY;AACtC,OAAOC,eAAc,MAAO,kCAAkC;AAE9D,eAAe;EACbC,UAAU,EAAE;IAAED;EAAgB,CAAC;EAC/BE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,QAAQ,EAAE,IAAG,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACTC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;MACpC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC7B,CAAC;IACD,MAAMN,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMO,QAAO,GAAI,MAAMf,GAAG,CAACgB,GAAG,CAAC,eAAe,CAAC;QAC/C,IAAI,CAACX,YAAW,GAAIU,QAAQ,CAACX,IAAI;;QAEjC;QACA,IAAI,IAAI,CAACC,YAAY,CAACY,MAAK,GAAI,CAAC,EAAE;UAC9B;UACA;UACA,IAAI,IAAI,CAACZ,YAAY,CAAC,CAAC,CAAC,CAACa,UAAS,IAAK,IAAI,CAACb,YAAY,CAAC,CAAC,CAAC,CAACa,UAAU,CAACC,IAAI,EAAE;YACzE,IAAI,CAACb,QAAO,GAAI,YAAY;UAChC,OAAO;YACH,IAAI,CAACA,QAAO,GAAI,UAAU;UAC9B;QACJ;QACA;MAEF,EAAE,OAAOc,KAAK,EAAE;QACZC,KAAK,CAAC,wDAAwD,CAAC;QAC/D,IAAI,CAACX,QAAQ,CAAC,CAAC;MACnB;IACF,CAAC;IACD,MAAMY,iBAAiBA,CAACC,EAAE,EAAE;MAC1B,IAAIC,OAAO,CAAC,kDAAkD,CAAC,EAAE;QAC/D,IAAI;UACF,MAAMxB,GAAG,CAACyB,MAAM,CAAC,iBAAiBF,EAAE,EAAE,CAAC;UACvCF,KAAK,CAAC,mCAAmC,CAAC;UAC1C,IAAI,CAACb,iBAAiB,CAAC,CAAC,EAAE;QAC5B,EAAE,OAAOY,KAAK,EAAE;UACdC,KAAK,CAAC,mBAAkB,GAAID,KAAK,CAACL,QAAQ,CAACX,IAAI,CAACgB,KAAK,CAAC;QACxD;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}